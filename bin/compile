#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

pwd

BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
LP_DIR=`cd $(dirname $0); cd ..; pwd`
PHP_PATH=$BUILD_DIR/zend-server-6-php-5.4
APACHE_PATH=$BUILD_DIR/apache
NGINX_PATH=$BUILD_DIR/nginx

# include .files when moving things around
shopt -s dotglob

cd $BUILD_DIR

# move app things to www
mkdir -p $CACHE_DIR/www
mv * $CACHE_DIR/www
mv $CACHE_DIR/www .

# keep Procfile
if [ -f www/Procfile ]; then
  mv www/Procfile .
fi

#Download and install Zend Server
tar xJf $LP_DIR/zend-server-6-php-5.4-nginx.tar.xz
tar xzf $LP_DIR/nginx.tar.gz

# update config files - only use this build pack on cloud foundry v2 instances with DEA_NG+Warden!!!!!!!
cp -r $LP_DIR/conf/nginx/* $NGINX_PATH
mkdir -p etc
cp $LP_DIR/conf/etc/zce.rc.nginx etc/zce.rc

cp -r $LP_DIR/conf/zend/* $PHP_PATH

# make php available on bin
mkdir -p bin
ln -s $PHP_PATH/bin/php bin/php
#TODO - put most of the script into the build pack instead of generating on the fly (for better stability)
cat >>boot.sh <<EOF
#!/bin/bash 

#Make Cloud Foundry information available to app

#Preserve Cloud Foundry information

#pwd
export LD_LIBRARY_PATH=/app/zend-server-6-php-5.4/lib
export PHP_INI_SCAN_DIR=/app/zend-server-6-php-5.4/etc/conf.d
export PHPRC=/app/zend-server-6-php-5.4/etc
#echo "VCAP_APPLICATION=\$VCAP_APPLICATION" >> /etc/zce.rc
echo "env[VCAP_APPLICATION] = \\"\${VCAP_APPLICATION}\\""  >> /app/zend-server-6-php-5.4/etc/php-fpm.conf
echo "Launching Zend Server..."
export USER_UID=\`id -u\`
#Change UID in Zend Server configuration to the one used in the gear
#TODO: Make this change using erb templates/augeas instead of sed which are more elegant
sed "s/vcap/\${USER_UID}/" \${PHP_INI_SCAN_DIR}/ZendGlobalDirectives.ini.erb > \${PHP_INI_SCAN_DIR}/ZendGlobalDirectives.ini
sed "s/VCAP_PORT/\${PORT}/" /app/nginx/conf/sites-available/default.erb > /app/nginx/conf/sites-available/default
rm -rf /app/nginx/conf/sites-enabled
mkdir /app/nginx/conf/sites-enabled
ln -f -s /app/nginx/conf/sites-available/default /app/nginx/conf/sites-enabled

#ls /app/zend-server-6-php-5.4/gui/lighttpd/sbin/php
#ldd /app/zend-server-6-php-5.4/gui/lighttpd/sbin/php
#ldd /app/zend-server-6-php-5.4/gui/lighttpd/sbin/php
echo "Creating/Upgrading Zend databases. This may take several minutes..."
/app/zend-server-6-php-5.4/gui/lighttpd/sbin/php -c /app/zend-server-6-php-5.4/gui/lighttpd/etc/php-fcgi.ini /app/zend-server-6-php-5.4/share/scripts/zs_create_databases.php zsDir=/app/zend-server-6-php-5.4 toVersion=6.1.0

#Generate 7 day trial license
#/app/zend-server-6-php-5.4/bin/zsd /app/zend-server-6-php-5.4/etc/zsd.ini --generate-license

#Start Zend Server
echo "Starting Zend Server"
/app/zend-server-6-php-5.4/bin/zendctl.sh start 

#Allow Zend Server processes to start 
sleep 1
if [ -z \$ZS_ADMIN_PASSWORD ]; then
   #Set the GUI admin password to "changeme" if a user did not 
   ZS_ADMIN_PASSWORD="changeme"
#Generate a Zend Server administrator password if one was not specificed in the manifest
   # ZS_ADMIN_PASSWORD=`date +%s | sha256sum | base64 | head -c 8` 
   # echo ZS_ADMIN_PASSWORD=$ZS_ADMIN_PASSWORD
fi 

#Bootstrap Zend Server
/app/zend-server-6-php-5.4/bin/zs-manage bootstrap-single-server -p \$ZS_ADMIN_PASSWORD -a 'TRUE'> /app/zend-server-6-php-5.4/tmp/api_key

#Start a binary that does nothing so that boot.sh never ends and warden does not kill the container
#This allows the web server to be safely restarted by Zend Server (during deploy etc...).
netstat -lntp
echo "Keep Container alive..."
exec /app/zend-server-6-php-5.4/bin/donothing


EOF

chmod +x boot.sh
# clean the cache
rm -rf $CACHE_DIR
